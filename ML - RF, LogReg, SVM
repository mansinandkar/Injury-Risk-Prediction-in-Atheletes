{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM3dg6sKnTU4jNDawvZxaM9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Svct5eUgMqUt","executionInfo":{"status":"ok","timestamp":1746558558131,"user_tz":420,"elapsed":3554,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}},"outputId":"de02eb26-14f1-4095-c960-38f0da74d3f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n","Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.2)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"]}],"source":["!pip install pandas scikit-learn"]},{"cell_type":"code","source":["#\n","import pandas as pd\n","\n","DATA_PATH = 'mhealth.csv' # Assuming you upload e.g. 'mhealth.csv'\n","\n","df = pd.read_csv(DATA_PATH)\n","print(f\"Shape: {df.shape}\")\n","display(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":273},"id":"qV0suSurOV1p","executionInfo":{"status":"ok","timestamp":1746558571082,"user_tz":420,"elapsed":12949,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}},"outputId":"0f480cc2-9c34-4162-9ef5-ebf90d3b2b1d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape: (1048575, 25)\n"]},{"output_type":"display_data","data":{"text/plain":["   acc_chest_x  acc_chest_y  acc_chest_z     ecg_1     ecg_2  acc_ankle_x  \\\n","0      -9.8184     0.009971      0.29563  0.004186  0.004186       2.1849   \n","1      -9.8489     0.524040      0.37348  0.004186  0.016745       2.3876   \n","2      -9.6602     0.181850      0.43742  0.016745  0.037677       2.4086   \n","3      -9.6507     0.214220      0.24033  0.079540  0.117220       2.1814   \n","4      -9.7030     0.303890      0.31156  0.221870  0.205130       2.4173   \n","\n","   acc_ankle_y  acc_ankle_z  gyro_ankle_x  gyro_ankle_y  ...  acc_wrist_y  \\\n","0      -9.6967      0.63077      0.103900      -0.84053  ...      -4.5781   \n","1      -9.5080      0.68389      0.085343      -0.83865  ...      -4.3198   \n","2      -9.5674      0.68113      0.085343      -0.83865  ...      -4.2772   \n","3      -9.4301      0.55031      0.085343      -0.83865  ...      -4.3163   \n","4      -9.3889      0.71098      0.085343      -0.83865  ...      -4.1459   \n","\n","   acc_wrist_z  gyro_wrist_x  gyro_wrist_y  gyro_wrist_z  mag_wrist_x  \\\n","0     0.187760      -0.44902       -1.0103      0.034483     -2.35000   \n","1     0.023595      -0.44902       -1.0103      0.034483     -2.16320   \n","2     0.275720      -0.44902       -1.0103      0.034483     -1.61750   \n","3     0.367520      -0.45686       -1.0082      0.025862     -1.07710   \n","4     0.407290      -0.45686       -1.0082      0.025862     -0.53684   \n","\n","   mag_wrist_y  mag_wrist_z  activity_label  subject  \n","0    -1.610200    -0.030899               0        1  \n","1    -0.882540     0.326570               0        1  \n","2    -0.165620    -0.030693               0        1  \n","3     0.006945    -0.382620               0        1  \n","4     0.175900    -1.095500               0        1  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-00ec33a6-a647-4cbe-b43d-f9f1734e9cae\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_chest_x</th>\n","      <th>acc_chest_y</th>\n","      <th>acc_chest_z</th>\n","      <th>ecg_1</th>\n","      <th>ecg_2</th>\n","      <th>acc_ankle_x</th>\n","      <th>acc_ankle_y</th>\n","      <th>acc_ankle_z</th>\n","      <th>gyro_ankle_x</th>\n","      <th>gyro_ankle_y</th>\n","      <th>...</th>\n","      <th>acc_wrist_y</th>\n","      <th>acc_wrist_z</th>\n","      <th>gyro_wrist_x</th>\n","      <th>gyro_wrist_y</th>\n","      <th>gyro_wrist_z</th>\n","      <th>mag_wrist_x</th>\n","      <th>mag_wrist_y</th>\n","      <th>mag_wrist_z</th>\n","      <th>activity_label</th>\n","      <th>subject</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-9.8184</td>\n","      <td>0.009971</td>\n","      <td>0.29563</td>\n","      <td>0.004186</td>\n","      <td>0.004186</td>\n","      <td>2.1849</td>\n","      <td>-9.6967</td>\n","      <td>0.63077</td>\n","      <td>0.103900</td>\n","      <td>-0.84053</td>\n","      <td>...</td>\n","      <td>-4.5781</td>\n","      <td>0.187760</td>\n","      <td>-0.44902</td>\n","      <td>-1.0103</td>\n","      <td>0.034483</td>\n","      <td>-2.35000</td>\n","      <td>-1.610200</td>\n","      <td>-0.030899</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-9.8489</td>\n","      <td>0.524040</td>\n","      <td>0.37348</td>\n","      <td>0.004186</td>\n","      <td>0.016745</td>\n","      <td>2.3876</td>\n","      <td>-9.5080</td>\n","      <td>0.68389</td>\n","      <td>0.085343</td>\n","      <td>-0.83865</td>\n","      <td>...</td>\n","      <td>-4.3198</td>\n","      <td>0.023595</td>\n","      <td>-0.44902</td>\n","      <td>-1.0103</td>\n","      <td>0.034483</td>\n","      <td>-2.16320</td>\n","      <td>-0.882540</td>\n","      <td>0.326570</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-9.6602</td>\n","      <td>0.181850</td>\n","      <td>0.43742</td>\n","      <td>0.016745</td>\n","      <td>0.037677</td>\n","      <td>2.4086</td>\n","      <td>-9.5674</td>\n","      <td>0.68113</td>\n","      <td>0.085343</td>\n","      <td>-0.83865</td>\n","      <td>...</td>\n","      <td>-4.2772</td>\n","      <td>0.275720</td>\n","      <td>-0.44902</td>\n","      <td>-1.0103</td>\n","      <td>0.034483</td>\n","      <td>-1.61750</td>\n","      <td>-0.165620</td>\n","      <td>-0.030693</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-9.6507</td>\n","      <td>0.214220</td>\n","      <td>0.24033</td>\n","      <td>0.079540</td>\n","      <td>0.117220</td>\n","      <td>2.1814</td>\n","      <td>-9.4301</td>\n","      <td>0.55031</td>\n","      <td>0.085343</td>\n","      <td>-0.83865</td>\n","      <td>...</td>\n","      <td>-4.3163</td>\n","      <td>0.367520</td>\n","      <td>-0.45686</td>\n","      <td>-1.0082</td>\n","      <td>0.025862</td>\n","      <td>-1.07710</td>\n","      <td>0.006945</td>\n","      <td>-0.382620</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-9.7030</td>\n","      <td>0.303890</td>\n","      <td>0.31156</td>\n","      <td>0.221870</td>\n","      <td>0.205130</td>\n","      <td>2.4173</td>\n","      <td>-9.3889</td>\n","      <td>0.71098</td>\n","      <td>0.085343</td>\n","      <td>-0.83865</td>\n","      <td>...</td>\n","      <td>-4.1459</td>\n","      <td>0.407290</td>\n","      <td>-0.45686</td>\n","      <td>-1.0082</td>\n","      <td>0.025862</td>\n","      <td>-0.53684</td>\n","      <td>0.175900</td>\n","      <td>-1.095500</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00ec33a6-a647-4cbe-b43d-f9f1734e9cae')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-00ec33a6-a647-4cbe-b43d-f9f1734e9cae button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-00ec33a6-a647-4cbe-b43d-f9f1734e9cae');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-61d915b0-71be-469d-a73c-f74d613b8b1e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-61d915b0-71be-469d-a73c-f74d613b8b1e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-61d915b0-71be-469d-a73c-f74d613b8b1e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","\n","activity_to_risk = {\n","    0: 0, # Nothing\n","    1: 0, # Standing still\n","    2: 0, # Sitting and relaxing\n","    3: 0, # Lying down\n","    4: 1, # Walking\n","    5: 1, # Climbing stairs\n","    6: 1, # Waist bends forward\n","    7: 0, # Frontal elevation of arms\n","    8: 1, # Knees bending (crouching)\n","    9: 1, # Cycling\n","    10:1, # Jogging\n","    11:1, # Running\n","    12:1  # Jumping front & back\n","}\n","\n","# Apply the activity-to-risk mapping to create the risk_label\n","df[\"risk_label\"] = df['activity_label'].map(activity_to_risk) # Assuming 'activity_label' is the correct column name for activity\n"],"metadata":{"id":"JU14NDK8hGEb","executionInfo":{"status":"ok","timestamp":1746558571084,"user_tz":420,"elapsed":5,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# 3. Split into features and labels\n","target_col = 'risk_label'\n","X = df.drop(columns=[target_col, 'subject', 'activity_label'])\n","y = df[target_col]\n"],"metadata":{"id":"DVZQjT9ZOWqj","executionInfo":{"status":"ok","timestamp":1746558571280,"user_tz":420,"elapsed":193,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Typical 80/20 split\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42, stratify=y\n",")\n","from imblearn.over_sampling import SMOTE\n","\n","smote = SMOTE(random_state=42)\n","X_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n","\n","\n","print(\"Train shape:\", X_train.shape, \"Test shape:\", X_test.shape)\n","print(\"Label distribution, train:\", y_train.value_counts(normalize=True).round(2))\n","print(\"Label distribution, test :\", y_test.value_counts(normalize=True).round(2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7GSP4LTUOYWU","executionInfo":{"status":"ok","timestamp":1746558752742,"user_tz":420,"elapsed":181456,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}},"outputId":"a8402a42-d369-4543-a2fd-7f347b79d3da"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Train shape: (838860, 23) Test shape: (209715, 23)\n","Label distribution, train: risk_label\n","0    0.82\n","1    0.18\n","Name: proportion, dtype: float64\n","Label distribution, test : risk_label\n","0    0.82\n","1    0.18\n","Name: proportion, dtype: float64\n"]}]},{"cell_type":"code","source":["from imblearn.over_sampling import SMOTE\n","\n","# Apply SMOTE to only training data\n","smote = SMOTE(random_state=42)\n","X_train, y_train = smote.fit_resample(X_train, y_train)\n","\n","# Check new distribution\n","print(\"After SMOTE, Train label distribution:\")\n","print(y_train.value_counts(normalize=True).round(2))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MBuxKunioRq_","executionInfo":{"status":"ok","timestamp":1746558921744,"user_tz":420,"elapsed":169005,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}},"outputId":"4a9a26ab-07e4-422b-9abe-8c00dc70254d"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["After SMOTE, Train label distribution:\n","risk_label\n","0    0.5\n","1    0.5\n","Name: proportion, dtype: float64\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n","\n","# Initialize Random Forest\n","rf = RandomForestClassifier(\n","    n_estimators=200,\n","    max_depth=None,\n","    min_samples_leaf=1,\n","    random_state=42,\n","    n_jobs=-1,\n","    class_weight='balanced'  # Still keep because even after SMOTE there could be slight imbalance\n",")\n","\n","# Train\n","rf.fit(X_train, y_train)\n","\n","# Predict\n","y_pred_rf = rf.predict(X_test)\n","\n","# Metrics\n","acc = accuracy_score(y_test, y_pred_rf)\n","prec = precision_score(y_test, y_pred_rf)\n","rec = recall_score(y_test, y_pred_rf)\n","f1 = f1_score(y_test, y_pred_rf)\n","\n","# Print Evaluation\n","print(\"\\nRandom Forest Evaluation Metrics:\")\n","print(f\"Accuracy  : {acc:.2f}\")\n","print(f\"Precision : {prec:.2f}\")\n","print(f\"Recall    : {rec:.2f}\")\n","print(f\"F1 Score  : {f1:.2f}\")\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred_rf))\n"],"metadata":{"id":"1QsYybc0OZwt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746562325449,"user_tz":420,"elapsed":3403716,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}},"outputId":"b6550ef1-8d41-4d69-bca8-fef2d776514d"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Random Forest Evaluation Metrics:\n","Accuracy  : 0.97\n","Precision : 0.86\n","Recall    : 0.98\n","F1 Score  : 0.91\n","\n","Confusion Matrix:\n","[[165532   6264]\n"," [   803  37116]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n","\n","# Subsample for Grid Search (Optional: Only if training is too slow)\n","subset_size = min(100000, len(X_train))  # Just in case you have fewer rows after SMOTE\n","rnd_idx = np.random.choice(X_train.index, size=subset_size, replace=False)\n","X_gs = X_train.loc[rnd_idx]\n","y_gs = y_train.loc[rnd_idx]\n","\n","# Build pipeline\n","logreg_pipeline = make_pipeline(\n","    StandardScaler(),\n","    LogisticRegression(class_weight='balanced', random_state=42, max_iter=1000)\n",")\n","\n","# Grid Search hyperparameters\n","param_grid = {\n","    'logisticregression__C': [0.1, 1, 10],\n","    'logisticregression__solver': ['lbfgs']  # lbfgs is good for L2 regularization\n","}\n","\n","grid = GridSearchCV(\n","    logreg_pipeline,\n","    param_grid,\n","    cv=3,\n","    scoring='f1',  # âš¡ Change scoring from 'accuracy' -> 'f1'\n","    n_jobs=-1,\n","    verbose=2\n",")\n","grid.fit(X_gs, y_gs)\n","\n","# Best Params\n","best_C = grid.best_params_['logisticregression__C']\n","best_solver = grid.best_params_['logisticregression__solver']\n","\n","# Final Model on full training set\n","final_pipeline = make_pipeline(\n","    StandardScaler(),\n","    LogisticRegression(\n","        class_weight='balanced',\n","        random_state=42,\n","        max_iter=1000,\n","        C=best_C,\n","        solver=best_solver\n","    )\n",")\n","final_pipeline.fit(X_train, y_train)\n","\n","# Predict\n","y_pred_lr = final_pipeline.predict(X_test)\n","\n","# Metrics\n","acc = accuracy_score(y_test, y_pred_lr)\n","prec = precision_score(y_test, y_pred_lr)\n","rec = recall_score(y_test, y_pred_lr)\n","f1 = f1_score(y_test, y_pred_lr)\n","\n","print(\"\\nLogistic Regression Evaluation Metrics:\")\n","print(f\"Accuracy  : {acc:.2f}\")\n","print(f\"Precision : {prec:.2f}\")\n","print(f\"Recall    : {rec:.2f}\")\n","print(f\"F1 Score  : {f1:.2f}\")\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred_lr))\n"],"metadata":{"id":"pZeogdeqObW3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746562339060,"user_tz":420,"elapsed":13613,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}},"outputId":"64638d87-ddd1-4703-c621-842d530d492c"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 3 candidates, totalling 9 fits\n","\n","Logistic Regression Evaluation Metrics:\n","Accuracy  : 0.70\n","Precision : 0.34\n","Recall    : 0.70\n","F1 Score  : 0.45\n","\n","Confusion Matrix:\n","[[119120  52676]\n"," [ 11258  26661]]\n"]}]},{"cell_type":"code","source":["from sklearn.svm import LinearSVC\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n","import numpy as np\n","\n","# Subsample for grid search (if needed)\n","subset_size = min(100000, len(X_train))  # Safer for SMOTE-balanced datasets\n","rnd_idx = np.random.choice(X_train.index, size=subset_size, replace=False)\n","X_gs = X_train.loc[rnd_idx]\n","y_gs = y_train.loc[rnd_idx]\n","\n","# Build SVM pipeline (LinearSVC prefers scaled features)\n","svm_pipeline = make_pipeline(\n","    StandardScaler(),\n","    LinearSVC(class_weight='balanced', random_state=42, max_iter=2000, dual=False)\n",")\n","\n","# Hyperparameter grid\n","param_grid = {\n","    'linearsvc__C': [0.01, 0.1, 1, 10]\n","}\n","\n","# Grid search\n","grid = GridSearchCV(\n","    svm_pipeline,\n","    param_grid,\n","    cv=3,\n","    scoring='f1',  # âš¡ Focus on F1, not just accuracy\n","    n_jobs=-1,\n","    verbose=2\n",")\n","grid.fit(X_gs, y_gs)\n","\n","print(\"Best SVM Parameters:\", grid.best_params_)\n","print(\"Best SVM CV F1 Score: {:.3f}\".format(grid.best_score_))\n","\n","# Refit best model on full training data\n","best_C = grid.best_params_['linearsvc__C']\n","\n","final_svm = make_pipeline(\n","    StandardScaler(),\n","    LinearSVC(\n","        class_weight='balanced',\n","        random_state=42,\n","        max_iter=2000,\n","        dual=False,\n","        C=best_C\n","    )\n",")\n","final_svm.fit(X_train, y_train)\n","\n","# Predict\n","y_pred_svm = final_svm.predict(X_test)\n","\n","# Metrics\n","acc = accuracy_score(y_test, y_pred_svm)\n","prec = precision_score(y_test, y_pred_svm)\n","rec = recall_score(y_test, y_pred_svm)\n","f1 = f1_score(y_test, y_pred_svm)\n","\n","print(\"\\nSVM Evaluation Metrics:\")\n","print(f\"Accuracy  : {acc:.2f}\")\n","print(f\"Precision : {prec:.2f}\")\n","print(f\"Recall    : {rec:.2f}\")\n","print(f\"F1 Score  : {f1:.2f}\")\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred_svm))\n"],"metadata":{"id":"DyjKgeAzOcqE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746562354713,"user_tz":420,"elapsed":15658,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}},"outputId":"34703374-0a13-4bb7-b2b4-a9c02b7b9137"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 4 candidates, totalling 12 fits\n","Best SVM Parameters: {'linearsvc__C': 0.01}\n","Best SVM CV F1 Score: 0.703\n","\n","SVM Evaluation Metrics:\n","Accuracy  : 0.70\n","Precision : 0.34\n","Recall    : 0.70\n","F1 Score  : 0.46\n","\n","Confusion Matrix:\n","[[119225  52571]\n"," [ 11248  26671]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"iNr3tEymqUwI","executionInfo":{"status":"ok","timestamp":1746562354725,"user_tz":420,"elapsed":8,"user":{"displayName":"Anuj Abhay Joshi","userId":"02449151037395228531"}}},"execution_count":17,"outputs":[]}]}